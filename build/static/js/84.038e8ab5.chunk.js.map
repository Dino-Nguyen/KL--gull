{"version":3,"sources":["app/GullLayout/Layout1/Layout1Sidenav.jsx","app/GullLayout/Layout1/Layout1Header.jsx","app/GullLayout/Layout1/Layout1.jsx"],"names":["Layout1Sidenav","windowListener","state","selectedItem","navOpen","secondaryNavOpen","onMainItemMouseEnter","item","type","setSelected","openSecSidenav","closeSecSidenav","onMainItemMouseLeave","setState","removeSelected","props","setLayoutSettings","settings","merge","layout1Settings","leftSidebar","console","log","other","isMobile","open","closeSidenav","openSidenav","this","window","innerWidth","addEventListener","target","removeEventListener","className","classList","navigations","map","i","active","onMouseEnter","onMouseLeave","key","path","to","icon","name","href","sub","menu","Component","withRouter","connect","setDefaultSettings","PropTypes","func","isRequired","logoutUser","user","layout","Layout1Header","shorcutMenuList","link","text","notificationList","title","description","time","color","status","showSearchBox","handleMenuClick","toggleFullScreen","document","fullscreenEnabled","fullscreen","exitFullscreen","documentElement","requestFullscreen","handleSearchBoxOpen","searchBox","src","alt","onClick","Dropdown","Toggle","as","Menu","MegaMenu","placeholder","onFocus","style","margin","data-fullscreen","role","id","note","index","getTimeDifference","Date","data-toggle","aria-haspopup","aria-expanded","Layout1","handleSearchBoxClose","prevProps","location","scrollTo","routes","fallback","Loading","renderRoutes","footer","show","Footer","GullSearch","handleClose"],"mappings":"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","file":"static/js/84.038e8ab5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { navigations } from \"../../navigations\";\r\nimport { merge } from \"lodash\";\r\nimport { classList, isMobile } from \"@utils\";\r\nimport Srcollbar from \"react-perfect-scrollbar\";\r\nimport { DropDownMenu } from \"@gull\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setLayoutSettings,\r\n  setDefaultSettings,\r\n} from \"app/redux/actions/LayoutActions\";\r\nimport { logoutUser } from \"app/redux/actions/UserActions\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ScrollBar from \"react-perfect-scrollbar\";\r\n\r\nclass Layout1Sidenav extends Component {\r\n  windowListener = null;\r\n\r\n  state = {\r\n    selectedItem: null,\r\n    navOpen: true,\r\n    secondaryNavOpen: false,\r\n  };\r\n\r\n  onMainItemMouseEnter = (item) => {\r\n    if (item.type === \"dropDown\") {\r\n      this.setSelected(item);\r\n      this.openSecSidenav();\r\n    } else {\r\n      this.setSelected(item);\r\n      this.closeSecSidenav();\r\n    }\r\n  };\r\n\r\n  onMainItemMouseLeave = () => {\r\n    // this.closeSecSidenav();\r\n  };\r\n\r\n  setSelected = (selectedItem) => {\r\n    this.setState({ selectedItem });\r\n    // console.log(selectedItem);\r\n  };\r\n\r\n  removeSelected = () => {\r\n    this.setState({ selectedItem: null });\r\n    // console.log('removed');\r\n  };\r\n\r\n  openSecSidenav = () => {\r\n    let { setLayoutSettings, settings } = this.props;\r\n\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          leftSidebar: {\r\n            secondaryNavOpen: true,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  closeSecSidenav = () => {\r\n    console.log(\"closing sec sidenav\");\r\n    let { setLayoutSettings, settings } = this.props;\r\n    let other = {};\r\n\r\n    if (isMobile()) {\r\n      other.open = false;\r\n    }\r\n\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          leftSidebar: {\r\n            ...other,\r\n            secondaryNavOpen: false,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  closeSidenav = () => {\r\n    console.log(\"closing sidenav\");\r\n\r\n    let { setLayoutSettings, settings } = this.props;\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          leftSidebar: {\r\n            open: false,\r\n            secondaryNavOpen: false,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  openSidenav = () => {\r\n    console.log(\"opening sidenav\");\r\n    let { setLayoutSettings, settings } = this.props;\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          leftSidebar: {\r\n            open: true,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.state.selectedItem === null) this.closeSecSidenav();\r\n\r\n    if (window)\r\n      if (window.innerWidth < 1200) {\r\n        this.closeSidenav();\r\n      } else {\r\n        this.openSidenav();\r\n      }\r\n\r\n    this.windowListener = window.addEventListener(\"resize\", ({ target }) => {\r\n      if (window.innerWidth < 1200) {\r\n        this.closeSidenav();\r\n      } else {\r\n        this.openSidenav();\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.windowListener) {\r\n      window.removeEventListener(\"resize\", this.windowListener);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { settings } = this.props;\r\n\r\n    return (\r\n      <div className=\"side-content-wrap\">\r\n        <Srcollbar\r\n          className={classList({\r\n            \"sidebar-left o-hidden rtl-ps-none\": true,\r\n            open: settings.layout1Settings.leftSidebar.open,\r\n          })}\r\n          // id=\"mainsidenav\"\r\n        >\r\n          <ul className=\"navigation-left\">\r\n            {navigations.map((item, i) => (\r\n              <li\r\n                className={classList({\r\n                  \"nav-item\": true,\r\n                  active: this.state.selectedItem === item,\r\n                })}\r\n                onMouseEnter={() => {\r\n                  this.onMainItemMouseEnter(item);\r\n                }}\r\n                onMouseLeave={this.onMainItemMouseLeave}\r\n                key={i}\r\n              >\r\n                {item.path && item.type !== \"extLink\" && (\r\n                  <NavLink className=\"nav-item-hold\" to={item.path}>\r\n                    <i className={`nav-icon ${item.icon}`}></i>\r\n                    <span className=\"nav-text\">{item.name}</span>\r\n                  </NavLink>\r\n                )}\r\n                {item.path && item.type === \"extLink\" && (\r\n                  <a className=\"nav-item-hold\" href={item.path}>\r\n                    <i className={`nav-icon ${item.icon}`}></i>\r\n                    <span className=\"nav-text\">{item.name}</span>\r\n                  </a>\r\n                )}\r\n                {!item.path && (\r\n                  <div className=\"nav-item-hold\">\r\n                    <i className={`nav-icon ${item.icon}`}></i>\r\n                    <span className=\"nav-text\">{item.name}</span>\r\n                  </div>\r\n                )}\r\n                <div className=\"triangle\"></div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </Srcollbar>\r\n\r\n        <ScrollBar\r\n          className={classList({\r\n            \"sidebar-left-secondary o-hidden rtl-ps-none\": true,\r\n            open: settings.layout1Settings.leftSidebar.secondaryNavOpen,\r\n          })}\r\n        >\r\n          {this.state.selectedItem && this.state.selectedItem.sub && (\r\n            <DropDownMenu\r\n              menu={this.state.selectedItem.sub}\r\n              closeSecSidenav={this.closeSecSidenav}\r\n            ></DropDownMenu>\r\n          )}\r\n          <span></span>\r\n        </ScrollBar>\r\n        <div\r\n          onMouseEnter={this.closeSecSidenav}\r\n          className={classList({\r\n            \"sidebar-overlay\": true,\r\n            open: settings.layout1Settings.leftSidebar.secondaryNavOpen,\r\n          })}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLayout1Sidenav.propTypes = {\r\n  setLayoutSettings: PropTypes.func.isRequired,\r\n  setDefaultSettings: PropTypes.func.isRequired,\r\n  logoutUser: PropTypes.func.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  setDefaultSettings: PropTypes.func.isRequired,\r\n  setLayoutSettings: PropTypes.func.isRequired,\r\n  logoutUser: PropTypes.func.isRequired,\r\n  user: state.user,\r\n  settings: state.layout.settings,\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, {\r\n    setLayoutSettings,\r\n    setDefaultSettings,\r\n    logoutUser,\r\n  })(Layout1Sidenav)\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport DropdownMenu from \"react-bootstrap/DropdownMenu\";\r\nimport { getTimeDifference } from \"@utils\";\r\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setLayoutSettings,\r\n  setDefaultSettings,\r\n} from \"app/redux/actions/LayoutActions\";\r\nimport { logoutUser } from \"app/redux/actions/UserActions\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { merge } from \"lodash\";\r\nimport MegaMenu from \"@gull/components/MegaMenu\";\r\n\r\nclass Layout1Header extends Component {\r\n  state = {\r\n    shorcutMenuList: [\r\n      {\r\n        icon: \"i-Shop-4\",\r\n        link: \"#\",\r\n        text: \"Home\",\r\n      },\r\n      {\r\n        icon: \"i-Library\",\r\n        link: \"#\",\r\n        text: \"Ui Kits\",\r\n      },\r\n      {\r\n        icon: \"i-Drop\",\r\n        link: \"#\",\r\n        text: \"Apps\",\r\n      },\r\n      {\r\n        icon: \"i-File-Clipboard-File--Text\",\r\n        link: \"#\",\r\n        text: \"Form\",\r\n      },\r\n      {\r\n        icon: \"i-Checked-User\",\r\n        link: \"#\",\r\n        text: \"Sessions\",\r\n      },\r\n      {\r\n        icon: \"i-Ambulance\",\r\n        link: \"#\",\r\n        text: \"Support\",\r\n      },\r\n    ],\r\n    notificationList: [\r\n      {\r\n        icon: \"i-Speach-Bubble-6\",\r\n        title: \"New message\",\r\n        description: \"James: Hey! are you busy?\",\r\n        time: \"2019-10-30T02:10:18.931Z\",\r\n        color: \"primary\",\r\n        status: \"New\",\r\n      },\r\n      {\r\n        icon: \"i-Receipt-3\",\r\n        title: \"New order received\",\r\n        description: \"1 Headphone, 3 iPhone\",\r\n        time: \"2019-03-10T02:10:18.931Z\",\r\n        color: \"success\",\r\n        status: \"New\",\r\n      },\r\n      {\r\n        icon: \"i-Empty-Box\",\r\n        title: \"Product out of stock\",\r\n        description: \"1 Headphone, 3 iPhone\",\r\n        time: \"2019-05-10T02:10:18.931Z\",\r\n        color: \"danger\",\r\n        status: \"3\",\r\n      },\r\n      {\r\n        icon: \"i-Data-Power\",\r\n        title: \"Server up!\",\r\n        description: \"Server rebooted successfully\",\r\n        time: \"2019-03-10T02:10:18.931Z\",\r\n        color: \"success\",\r\n        status: \"3\",\r\n      },\r\n    ],\r\n    showSearchBox: false,\r\n  };\r\n\r\n  handleMenuClick = () => {\r\n    let { setLayoutSettings, settings } = this.props;\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          leftSidebar: {\r\n            open: settings.layout1Settings.leftSidebar.secondaryNavOpen\r\n              ? true\r\n              : !settings.layout1Settings.leftSidebar.open,\r\n            secondaryNavOpen: false,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  toggleFullScreen = () => {\r\n    if (document.fullscreenEnabled) {\r\n      if (!document.fullscreen) document.documentElement.requestFullscreen();\r\n      else document.exitFullscreen();\r\n    }\r\n  };\r\n\r\n  handleSearchBoxOpen = () => {\r\n    let { setLayoutSettings, settings } = this.props;\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          searchBox: {\r\n            open: true,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let { shorcutMenuList, notificationList } = this.state;\r\n\r\n    return (\r\n      <div className=\"main-header\">\r\n        <div className=\"logo\">\r\n          <img src=\"/assets/images/logo.png\" alt=\"\" />\r\n        </div>\r\n\r\n        <div className=\"menu-toggle\" onClick={this.handleMenuClick}>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n\r\n        <div className=\"d-none d-lg-flex align-items-center\">\r\n          <Dropdown className=\"me-3\">\r\n            <Dropdown.Toggle as=\"div\" className=\"toggle-hidden cursor-pointer\">\r\n              Mega Menu\r\n            </Dropdown.Toggle>\r\n\r\n            <div className=\"mega-menu\">\r\n              <Dropdown.Menu>\r\n                <MegaMenu></MegaMenu>\r\n              </Dropdown.Menu>\r\n            </div>\r\n          </Dropdown>\r\n\r\n          <div className=\"search-bar\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search\"\r\n              onFocus={this.handleSearchBoxOpen}\r\n            />\r\n            <i className=\"search-icon text-muted i-Magnifi-Glass1\"></i>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ margin: \"auto\" }}></div>\r\n\r\n        <div className=\"header-part-right\">\r\n          <i\r\n            className=\"i-Full-Screen header-icon d-none d-sm-inline-block\"\r\n            data-fullscreen\r\n            onClick={this.toggleFullScreen}\r\n          ></i>\r\n\r\n          <Dropdown>\r\n            <Dropdown.Toggle as=\"span\" className=\"toggle-hidden\">\r\n              <i\r\n                className=\"i-Safe-Box text-muted header-icon\"\r\n                role=\"button\"\r\n              ></i>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <div className=\"menu-icon-grid\">\r\n                {shorcutMenuList.map((menu) => (\r\n                  <Link key={menu.text} to={menu.link}>\r\n                    <i className={menu.icon}></i> {menu.text}\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n\r\n          <Dropdown>\r\n            <Dropdown.Toggle\r\n              as=\"div\"\r\n              id=\"dropdownNotification\"\r\n              className=\"badge-top-container toggle-hidden\"\r\n            >\r\n              <span className=\"badge bg-primary cursor-pointer\">3</span>\r\n              <i className=\"i-Bell text-muted header-icon\"></i>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu className=\"notification-dropdown\">\r\n              {notificationList.map((note, index) => (\r\n                <div key={index} className=\"dropdown-item d-flex\">\r\n                  <div className=\"notification-icon\">\r\n                    <i className={`${note.icon} text-${note.color} mr-1`}></i>\r\n                  </div>\r\n                  <div className=\"notification-details flex-grow-1\">\r\n                    <p className=\"m-0 d-flex align-items-center\">\r\n                      <span>{note.title}</span>\r\n                      <span\r\n                        className={`badge rounded-pill bg-${note.color} ms-1 me-1`}\r\n                      >\r\n                        {note.status}\r\n                      </span>\r\n                      <span className=\"flex-grow-1\"></span>\r\n                      <span className=\"text-small text-muted ms-auto\">\r\n                        {getTimeDifference(new Date(note.time))} ago\r\n                      </span>\r\n                    </p>\r\n                    <p className=\"text-small text-muted m-0\">\r\n                      {note.description}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n\r\n          <div className=\"user col px-3\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle\r\n                as=\"span\"\r\n                className=\"toggle-hidden cursor-pointer\"\r\n              >\r\n                <img\r\n                  src=\"/assets/images/faces/1.jpg\"\r\n                  id=\"userDropdown\"\r\n                  alt=\"\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                />\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <div className=\"dropdown-header\">\r\n                  <i className=\"i-Lock-User me-1\"></i> Timothy Carlson\r\n                </div>\r\n                <Link to=\"/\" className=\"dropdown-item cursor-pointer\">\r\n                  Account settings\r\n                </Link>\r\n                <Link to=\"/\" className=\"dropdown-item cursor-pointer\">\r\n                  Billing history\r\n                </Link>\r\n                <Link\r\n                  to=\"/\"\r\n                  className=\"dropdown-item cursor-pointer\"\r\n                  onClick={this.props.logoutUser}\r\n                >\r\n                  Sign out\r\n                </Link>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLayout1Header.propTypes = {\r\n  setLayoutSettings: PropTypes.func.isRequired,\r\n  setDefaultSettings: PropTypes.func.isRequired,\r\n  logoutUser: PropTypes.func.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  setDefaultSettings: PropTypes.func.isRequired,\r\n  setLayoutSettings: PropTypes.func.isRequired,\r\n  logoutUser: PropTypes.func.isRequired,\r\n  user: state.user,\r\n  settings: state.layout.settings,\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, {\r\n    setLayoutSettings,\r\n    setDefaultSettings,\r\n    logoutUser,\r\n  })(Layout1Header)\r\n);\r\n","import React, { Component, Suspense } from \"react\";\r\nimport { renderRoutes } from \"react-router-config\";\r\n\r\nimport Layout1Sidenav from \"./Layout1Sidenav\";\r\nimport Footer from \"../SharedComponents/Footer\";\r\nimport Layout1Header from \"./Layout1Header\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { classList } from \"@utils\";\r\nimport GullSearch from \"@gull/components/GullSearch\";\r\nimport { setLayoutSettings } from \"app/redux/actions/LayoutActions\";\r\nimport { merge } from \"lodash\";\r\nimport Loading from \"@gull/components/GullLoadable/Loading\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Layout1 extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n  state = {};\r\n\r\n  handleSearchBoxClose = () => {\r\n    let { setLayoutSettings, settings } = this.props;\r\n    setLayoutSettings(\r\n      merge({}, settings, {\r\n        layout1Settings: {\r\n          searchBox: {\r\n            open: false,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let { settings, routes } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div className={`app-admin-wrap layout-sidebar-large`}>\r\n          <Layout1Header></Layout1Header>\r\n          <Layout1Sidenav />\r\n          {/* sidebar */}\r\n\r\n          <div\r\n            className={classList({\r\n              \"main-content-wrap d-flex flex-column\": true,\r\n              \"sidenav-open\": settings.layout1Settings.leftSidebar.open,\r\n            })}\r\n          >\r\n            <Suspense fallback={<Loading />}>\r\n              <div className=\"main-content\">{renderRoutes(routes)}</div>\r\n            </Suspense>\r\n            {settings.footer.show && <Footer></Footer>}\r\n          </div>\r\n        </div>\r\n        <GullSearch\r\n          open={settings.layout1Settings.searchBox.open}\r\n          handleClose={this.handleSearchBoxClose}\r\n        ></GullSearch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  setLayoutSettings: PropTypes.func.isRequired,\r\n  settings: state.layout.settings,\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { setLayoutSettings })(Layout1)\r\n);\r\n"],"sourceRoot":""}