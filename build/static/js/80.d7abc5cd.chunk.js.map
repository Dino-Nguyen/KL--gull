{"version":3,"sources":["app/views/app/inbox/InboxComposeDialog.jsx","app/views/app/inbox/InboxSidenav.jsx","app/views/app/inbox/InboxContent.jsx","app/views/app/inbox/AppInbox.jsx","app/views/app/inbox/inboxService.js"],"names":["InboxComposeDialog","state","to","subject","content","attachment","handleSubmit","values","setSubmitting","console","log","handleContentChange","contentHtml","setState","this","props","open","handleClose","Modal","show","onHide","size","centered","initialValues","validationSchema","emailSchema","onSubmit","enableReinitialize","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","className","FormGroup","FormLabel","FormControl","type","name","placeholder","onChange","onBlur","isInvalid","value","val","Button","onClick","variant","htmlFor","as","event","target","files","id","Component","yup","shape","email","required","InboxSidenav","toggleSidenav","useState","composeDialogOpen","setComposeDialogOpen","style","left","InboxContent","mainSidenavOpen","secSidenavOpen","isMobile","messageList","selectedMessage","setMessage","useEffect","length","marginLeft","minHeight","data-suppress-scroll-y","data-sidebar-toggle","href","data-suppress-scroll-x","width","src","sender","photo","alt","format","Date","date","getTime","ReactHtmlParser","message","map","key","handleMessageClick","AppInbox","container","React","createRef","masterCheckbox","field","window","windowResizeListener","addEventListener","e","axios","get","then","data","removeEventListener"],"mappings":"kSAYMA,E,4MACJC,MAAQ,CACNC,GAAI,GACJC,QAAS,GACTC,QAAS,GACTC,WAAY,M,EAGdC,aAAe,SAACC,EAAD,GAA+B,EAApBC,cACxBC,QAAQC,IAAIH,I,EAGdI,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CACZT,QAASQ,K,4CAIb,WACE,MAA4BE,KAAKC,MAA3BC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,YAEZ,OACE,kBAACC,EAAA,EAAD,CAAOC,KAAMH,EAAMI,OAAQH,EAAaI,KAAK,KAAKC,UAAQ,GACxD,kBAAC,IAAD,CACEC,cAAeT,KAAKb,MACpBuB,iBAAkBC,EAClBC,SAAUZ,KAAKR,aACfqB,oBAAoB,IAEnB,gBACCpB,EADD,EACCA,OACAqB,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAzB,EAND,EAMCA,aAGA0B,GATD,EAOCC,aAPD,EAQCzB,cARD,EASCwB,eATD,OAWC,0BAAMN,SAAUpB,EAAc4B,UAAU,kBACtC,kBAACC,EAAA,EAAD,CAAWD,UAAU,QACnB,kBAACE,EAAA,EAAD,WACA,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,KACLC,YAAY,kBACZC,SAAUX,EACVY,OAAQX,EACRY,UAAWf,EAAO1B,IAAM2B,EAAQ3B,GAChC0C,MAAOrC,EAAOL,MAGlB,kBAACiC,EAAA,EAAD,CAAWD,UAAU,QACnB,kBAACE,EAAA,EAAD,gBACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,UACLC,YAAY,kBACZC,SAAUX,EACVY,OAAQX,EACRY,UAAWf,EAAOzB,SAAW0B,EAAQ1B,QACrCyC,MAAOrC,EAAOJ,WAIlB,kBAAC,IAAD,CACEC,QAASG,EAAOH,QAChBO,oBAAqB,SAACkC,GAAD,OAASb,EAAc,UAAWa,IACvDL,YAAY,wBAEd,yBAAKN,UAAU,iDACb,kBAACY,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAS9B,EAAa+B,QAAQ,aAApD,UAIA,yBAAKd,UAAU,6BACZ3B,EAAOF,YACN,uBAAG6B,UAAU,QAAQ3B,EAAOF,WAAWkC,MAEzC,2BAAOU,QAAQ,aAAaf,UAAU,QACpC,kBAACY,EAAA,EAAD,CACER,KAAK,SACLJ,UAAU,QACVgB,GAAG,OACHF,QAAQ,aAER,uBAAGd,UAAU,yBAGjB,2BACEO,SAAU,SAACU,GAAD,OACRnB,EAAc,aAAcmB,EAAMC,OAAOC,MAAM,KAEjDnB,UAAU,SACVoB,GAAG,aACHhB,KAAK,SAEP,kBAACQ,EAAA,EAAD,CACEZ,UAAU,cACVc,QAAQ,UACRV,KAAK,UAEL,uBAAGJ,UAAU,8B,GAvGAqB,aAmH3B9B,EAAc+B,WAAaC,MAAM,CACrCvD,GAAIsD,WAAaE,MAAM,iBAAiBC,SAAS,qBACjDxD,QAASqD,WAAaG,SAAS,uBAC/BvD,QAASoD,WAAaG,SAAS,sBAGlB3D,ICrEA4D,EA7DM,SAAC,GAA6B,IAA3B5C,EAA0B,EAA1BA,KAAM6C,EAAoB,EAApBA,cAC5B,EAAgDC,oBAAS,GAAzD,mBAAKC,EAAL,KAAwBC,EAAxB,KAKA,OACE,yBACE9B,UAAU,6BACV+B,MAAO,CAAEC,KAAMlD,EAAO,EAAI,WAE1B,yBAAKkB,UAAU,kBACb,uBACEA,UAAU,uCACVa,QAAS,kBAAMc,EAAc,sBAE/B,4BACEd,QAAS,kBAAMiB,GAAqB,IACpC9B,UAAU,0CAFZ,WAMA,yBAAKA,UAAU,QACb,uBAAGA,UAAU,mBAAb,UACA,wBAAIA,UAAU,kBACZ,4BACE,0BAAMA,UAAU,UACd,uBAAGA,UAAU,0BADf,eAIF,4BACE,8BACE,uBAAGA,UAAU,+BADf,UAIF,4BACE,8BACE,uBAAGA,UAAU,iCADf,aAIF,4BACE,8BACE,uBAAGA,UAAU,gCADf,WAIF,4BACE,8BACE,uBAAGA,UAAU,6BADf,aAOR,kBAAC,EAAD,CACElB,KAAM+C,EACN9C,YArDc,WAClB+C,GAAqB,Q,8DCwIVG,EAzIM,SAAC,GAMhB,EALJC,gBAKK,IAJLC,EAII,EAJJA,eACAC,EAGI,EAHJA,SAGI,IAFJC,mBAEI,MAFU,GAEV,EADJV,EACI,EADJA,cAEA,EAAsCC,mBAAS,MAA/C,mBAAOU,EAAP,KAAwBC,EAAxB,KAWA,OAJAC,qBAAU,WACJH,EAAYI,OAAS,GAAGF,EAAWF,EAAY,MAClD,CAACA,IAGF,yBACErC,UAAU,qCACV+B,MAAO,CAAEW,WAAYN,EAAW,EAAI,UAGpC,yBAAKpC,UAAU,oEACb,yBACEA,UAAU,kBACV+B,MAAO,CAAEW,WAAYN,EAAW,EAAI,UAEpC,yBACEpC,UAAU,oDACV+B,MAAO,CAAEY,UAAW,UAEpB,yBACE3C,UAAU,+DACV4C,yBAAuB,QAGvB,0BACEC,sBAAoB,OACpB7C,UAAU,sBACVa,QAAS,kBAAMc,EAAc,qBAE7B,uBAAG3B,UAAU,oCAEf,0BACEA,UAAU,2BACVa,QAAS,kBAAMc,EAAc,oBAE7B,uBAAG3B,UAAU,+BAJf,UAOA,yBAAKA,UAAU,UACb,0BAAM8C,KAAK,GAAG9C,UAAU,kBACtB,uBAAGA,UAAU,8BADf,SAIA,0BAAM8C,KAAK,GAAG9C,UAAU,kBACtB,uBAAGA,UAAU,kCADf,WAIA,0BAAM8C,KAAK,GAAG9C,UAAU,kBACtB,uBAAGA,UAAU,kCADf,YAQHsC,EACC,kBAAC,IAAD,CACEtC,UAAU,8CACV+C,yBAAuB,QAEvB,yBAAK/C,UAAU,qBACb,yBAAKA,UAAU,OAAO+B,MAAO,CAAEiB,MAAO,SACpC,yBACEhD,UAAU,iBACViD,IAAKX,EAAgBY,OAAOC,MAC5BC,IAAKd,EAAgBY,OAAO7C,QAGhC,yBAAKL,UAAU,aACb,uBAAGA,UAAU,OAAOsC,EAAgBY,OAAO7C,MAC3C,uBAAGL,UAAU,sBACVqD,kBACC,IAAIC,KAAKhB,EAAgBiB,MAAMC,UAC/B,mBAKR,wBAAIxD,UAAU,QAAQsC,EAAgBrE,SACtC,6BAAMwF,IAAgBnB,EAAgBoB,WAGxC,yBAAK1D,UAAU,qBAAf,0BAMN,kBAAC,IAAD,CACEA,UAAU,kCACV+B,MAAO,CAAEC,KAAMI,EAAYD,EAAiB,EAAI,SAAY,IAE5D,uBACEnC,UAAU,uCACVa,QAAS,kBAAMc,EAAc,qBAG9BU,EAAYsB,KAAI,SAACD,GAAD,OACf,yBACE1D,UAAU,YACV4D,IAAKF,EAAQtC,GACbP,QAAS,kBA1GM,SAAC6C,GAC1BnB,EAAWmB,GACPtB,GAAUT,EAAc,kBAwGHkC,CAAmBH,KAElC,yBAAK1D,UAAU,UACb,yBAAKiD,IAAKS,EAAQR,OAAOC,MAAOC,IAAKM,EAAQR,OAAO7C,QAEtD,yBAAKL,UAAU,oBACb,0BAAMA,UAAU,mBAAmB0D,EAAQR,OAAO7C,MAClD,uBAAGL,UAAU,OAAO0D,EAAQzF,UAE9B,yBAAK+B,UAAU,iBACb,0BAAMA,UAAU,cACbqD,kBAAO,IAAIC,KAAKI,EAAQH,MAAMC,UAAW,0BC7HtDM,E,4MACJC,UAAYC,IAAMC,Y,EAElBlG,MAAQ,CACNmE,iBAAiB,EACjBC,gBAAgB,EAChB+B,gBAAgB,EAChB9B,UAAU,EACVC,YAAa,I,EAGfV,cAAgB,SAAAwC,GACd,EAAKxF,SAAL,eAAiBwF,GAAS,EAAKpG,MAAMoG,M,uDAGvC,WAAqB,IAAD,OACd/B,eACFxD,KAAKD,SAAS,CACZuD,iBAAiB,EACjBC,gBAAgB,EAChBC,UAAU,IAEVgC,SACFxF,KAAKyF,qBAAuBD,OAAOE,iBAAiB,UAAU,SAAAC,GACxDnC,cACF,EAAKzD,SAAS,CACZuD,iBAAiB,EACjBC,gBAAgB,EAChBC,UAAU,IAGZ,EAAKzD,SAAS,CACZuD,iBAAiB,EACjBC,gBAAgB,EAChBC,UAAU,QCrCboC,IAAMC,IAAI,kBDyCCC,MAAK,SAAAC,GACnB,EAAKhG,SAAS,CACZ0D,YAAasC,EAAKA,Y,kCAKxB,WACMP,QAAQA,OAAOQ,oBAAoB,SAAUhG,KAAKyF,wB,oBAGxD,WACE,MAAiEzF,KAAKb,MAAhEmE,EAAN,EAAMA,gBAAiBC,EAAvB,EAAuBA,eAAgBE,EAAvC,EAAuCA,YAAaD,EAApD,EAAoDA,SACpD,OACE,yBAAKpC,UAAU,kDACb,kBAAC,EAAD,CACEmC,eAAgBA,EAChBD,gBAAiBA,EACjBE,SAAUA,EACVC,YAAaA,EACbV,cAAe/C,KAAK+C,gBAEtB,kBAAC,EAAD,CACE7C,KAAMoD,EACNP,cAAe/C,KAAK+C,qB,GA9DPN,aAqERyC","file":"static/js/80.d7abc5cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  FormGroup,\r\n  FormControl,\r\n  FormLabel,\r\n} from \"react-bootstrap\";\r\nimport { RichTextEditor } from \"@gull\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nclass InboxComposeDialog extends Component {\r\n  state = {\r\n    to: \"\",\r\n    subject: \"\",\r\n    content: \"\",\r\n    attachment: null,\r\n  };\r\n\r\n  handleSubmit = (values, { setSubmitting }) => {\r\n    console.log(values);\r\n  };\r\n\r\n  handleContentChange = (contentHtml) => {\r\n    this.setState({\r\n      content: contentHtml,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { open, handleClose } = this.props;\r\n\r\n    return (\r\n      <Modal show={open} onHide={handleClose} size=\"lg\" centered>\r\n        <Formik\r\n          initialValues={this.state}\r\n          validationSchema={emailSchema}\r\n          onSubmit={this.handleSubmit}\r\n          enableReinitialize={true}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            setSubmitting,\r\n            setFieldValue,\r\n          }) => (\r\n            <form onSubmit={handleSubmit} className=\"inbox-form p-4\">\r\n              <FormGroup className=\"mb-2\">\r\n                <FormLabel>To</FormLabel>\r\n                <FormControl\r\n                  type=\"email\"\r\n                  name=\"to\"\r\n                  placeholder=\"uilib@xmail.com\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isInvalid={errors.to && touched.to}\r\n                  value={values.to}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup className=\"mb-2\">\r\n                <FormLabel>Subject</FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"subject\"\r\n                  placeholder=\"uilib@xmail.com\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isInvalid={errors.subject && touched.subject}\r\n                  value={values.subject}\r\n                />\r\n              </FormGroup>\r\n\r\n              <RichTextEditor\r\n                content={values.content}\r\n                handleContentChange={(val) => setFieldValue(\"content\", val)}\r\n                placeholder=\"insert text here...\"\r\n              />\r\n              <div className=\"mt-3 d-flex flex-wrap justify-content-between\">\r\n                <Button type=\"button\" onClick={handleClose} variant=\"secondary\">\r\n                  Cancel\r\n                </Button>\r\n\r\n                <div className=\"d-flex align-items-center\">\r\n                  {values.attachment && (\r\n                    <p className=\"me-4\">{values.attachment.name}</p>\r\n                  )}\r\n                  <label htmlFor=\"attachment\" className=\"mb-0\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      className=\"me-2 \"\r\n                      as=\"span\"\r\n                      variant=\"secondary\"\r\n                    >\r\n                      <i className=\"i-Mail-Attachement\"></i>\r\n                    </Button>\r\n                  </label>\r\n                  <input\r\n                    onChange={(event) =>\r\n                      setFieldValue(\"attachment\", event.target.files[0])\r\n                    }\r\n                    className=\"d-none\"\r\n                    id=\"attachment\"\r\n                    type=\"file\"\r\n                  />\r\n                  <Button\r\n                    className=\"btn-rounded\"\r\n                    variant=\"primary\"\r\n                    type=\"submit\"\r\n                  >\r\n                    <i className=\"i-Paper-Plane\"></i>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst emailSchema = yup.object().shape({\r\n  to: yup.string().email(\"Invalid email\").required(\"email is required\"),\r\n  subject: yup.string().required(\"subject is required\"),\r\n  content: yup.string().required(\"content required\"),\r\n});\r\n\r\nexport default InboxComposeDialog;\r\n","import React, { useState } from \"react\";\r\nimport InboxComposeDialog from \"./InboxComposeDialog\";\r\n\r\nconst InboxSidenav = ({ open, toggleSidenav }) => {\r\n  let [composeDialogOpen, setComposeDialogOpen] = useState(false);\r\n  const closeDialog = () => {\r\n    setComposeDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"inbox-main-sidebar sidebar\"\r\n      style={{ left: open ? 0 : \"-180px\" }}\r\n    >\r\n      <div className=\"pt-3 pe-3 pb-3\">\r\n        <i\r\n          className=\"sidebar-close i-Close cursor-pointer\"\r\n          onClick={() => toggleSidenav(\"mainSidenavOpen\")}\r\n        ></i>\r\n        <button\r\n          onClick={() => setComposeDialogOpen(true)}\r\n          className=\"btn btn-rounded btn-primary w-100 mb-4\"\r\n        >\r\n          Compose\r\n        </button>\r\n        <div className=\"ps-3\">\r\n          <p className=\"text-muted mb-2\">Browse</p>\r\n          <ul className=\"inbox-main-nav\">\r\n            <li>\r\n              <span className=\"active\">\r\n                <i className=\"icon-regular i-Mail-2\"></i> Inbox (2)\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>\r\n                <i className=\"icon-regular i-Mail-Outbox\"></i> Sent\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>\r\n                <i className=\"icon-regular i-Mail-Favorite\"></i> Starred\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>\r\n                <i className=\"icon-regular i-Folder-Trash\"></i> Trash\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>\r\n                <i className=\"icon-regular i-Spam-Mail\"></i> Spam\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <InboxComposeDialog\r\n        open={composeDialogOpen}\r\n        handleClose={closeDialog}\r\n      ></InboxComposeDialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InboxSidenav;\r\n\r\n/* <Button\r\n        onClick={() => setOpen(true)}\r\n        variant=\"danger\"\r\n        className=\"py-8 w-100\"\r\n      >\r\n        Compose\r\n      </Button>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon>inbox</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Inbox\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon>folder_special</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Starred\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon>send</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Sent\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon>inbox</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Inbox\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon>error</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Spam\" />\r\n      </ListItem>\r\n\r\n      <Divider />\r\n\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon color=\"primary\">people</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Social\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon color=\"secondary\">local_offer</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Promotions\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <Icon color=\"secondary\">forums</Icon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Forums\" />\r\n      </ListItem>\r\n\r\n      <InboxComposeDialog open={open} handleClose={handleClose} /> */\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst InboxContent = ({\r\n  mainSidenavOpen,\r\n  secSidenavOpen,\r\n  isMobile,\r\n  messageList = [],\r\n  toggleSidenav,\r\n}) => {\r\n  const [selectedMessage, setMessage] = useState(null);\r\n\r\n  const handleMessageClick = (message) => {\r\n    setMessage(message);\r\n    if (isMobile) toggleSidenav(\"secSidenavOpen\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (messageList.length > 0) setMessage(messageList[0]);\r\n  }, [messageList]);\r\n\r\n  return (\r\n    <div\r\n      className=\"inbox-main-content sidebar-content\"\r\n      style={{ marginLeft: isMobile ? 0 : \"180px\" }}\r\n    >\r\n      {/* <!-- SECONDARY SIDEBAR CONTAINER --> */}\r\n      <div className=\"inbox-secondary-sidebar-container box-shadow-1 sidebar-container\">\r\n        <div\r\n          className=\"sidebar-content\"\r\n          style={{ marginLeft: isMobile ? 0 : \"360px\" }}\r\n        >\r\n          <div\r\n            className=\"inbox-secondary-sidebar-content position-relative\"\r\n            style={{ minHeight: \"500px\" }}\r\n          >\r\n            <div\r\n              className=\"inbox-topbar box-shadow-1 perfect-scrollbar rtl-ps-none ps-3\"\r\n              data-suppress-scroll-y=\"true\"\r\n            >\r\n              {/* <!-- <span className=\"d-sm-none\">Test</span> --> */}\r\n              <span\r\n                data-sidebar-toggle=\"main\"\r\n                className=\"link-icon d-md-none\"\r\n                onClick={() => toggleSidenav(\"mainSidenavOpen\")}\r\n              >\r\n                <i className=\"icon-regular i-Arrow-Turn-Left\"></i>\r\n              </span>\r\n              <span\r\n                className=\"link-icon me-3 d-md-none\"\r\n                onClick={() => toggleSidenav(\"secSidenavOpen\")}\r\n              >\r\n                <i className=\"icon-regular me-1 i-Left-3\"></i> Inbox\r\n              </span>\r\n\r\n              <div className=\"d-flex\">\r\n                <span href=\"\" className=\"link-icon me-3\">\r\n                  <i className=\"icon-regular i-Mail-Reply\"></i>\r\n                  Reply\r\n                </span>\r\n                <span href=\"\" className=\"link-icon me-3\">\r\n                  <i className=\"icon-regular i-Mail-Reply-All\"></i>\r\n                  Forward\r\n                </span>\r\n                <span href=\"\" className=\"link-icon me-3\">\r\n                  <i className=\"icon-regular i-Mail-Reply-All\"></i>\r\n                  Delete\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* <!-- EMAIL DETAILS --> */}\r\n            {selectedMessage ? (\r\n              <PerfectScrollbar\r\n                className=\"inbox-details perfect-scrollbar rtl-ps-none\"\r\n                data-suppress-scroll-x=\"true\"\r\n              >\r\n                <div className=\"d-flex no-gutters\">\r\n                  <div className=\"me-2\" style={{ width: \"36px\" }}>\r\n                    <img\r\n                      className=\"rounded-circle\"\r\n                      src={selectedMessage.sender.photo}\r\n                      alt={selectedMessage.sender.name}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-xs-12\">\r\n                    <p className=\"m-0\">{selectedMessage.sender.name}</p>\r\n                    <p className=\"text-12 text-muted\">\r\n                      {format(\r\n                        new Date(selectedMessage.date).getTime(),\r\n                        \"dd MMM, yyyy\"\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <h4 className=\"mb-3\">{selectedMessage.subject}</h4>\r\n                <div>{ReactHtmlParser(selectedMessage.message)}</div>\r\n              </PerfectScrollbar>\r\n            ) : (\r\n              <div className=\"w-100 text-center\">No message available</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* <!-- Secondary Inbox sidebar --> */}\r\n        <PerfectScrollbar\r\n          className=\"inbox-secondary-sidebar sidebar\"\r\n          style={{ left: isMobile ? (secSidenavOpen ? 0 : \"-280px\") : 0 }}\r\n        >\r\n          <i\r\n            className=\"sidebar-close i-Close cursor-pointer\"\r\n            onClick={() => toggleSidenav(\"secSidenavOpen\")}\r\n          ></i>\r\n\r\n          {messageList.map((message) => (\r\n            <div\r\n              className=\"mail-item\"\r\n              key={message.id}\r\n              onClick={() => handleMessageClick(message)}\r\n            >\r\n              <div className=\"avatar\">\r\n                <img src={message.sender.photo} alt={message.sender.name} />\r\n              </div>\r\n              <div className=\"col-xs-6 details\">\r\n                <span className=\"name text-muted\">{message.sender.name}</span>\r\n                <p className=\"m-0\">{message.subject}</p>\r\n              </div>\r\n              <div className=\"col-xs-3 date\">\r\n                <span className=\"text-muted\">\r\n                  {format(new Date(message.date).getTime(), \"dd MMM, yyyy\")}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </PerfectScrollbar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InboxContent;\r\n","import React, { Component } from \"react\";\r\nimport { isMobile } from \"@utils\";\r\nimport InboxSidenav from \"./InboxSidenav\";\r\nimport { getAllMessage } from \"./inboxService\";\r\nimport InboxContent from \"./InboxContent\";\r\n\r\nclass AppInbox extends Component {\r\n  container = React.createRef();\r\n  windowResizeListener;\r\n  state = {\r\n    mainSidenavOpen: true,\r\n    secSidenavOpen: true,\r\n    masterCheckbox: false,\r\n    isMobile: false,\r\n    messageList: []\r\n  };\r\n\r\n  toggleSidenav = field => {\r\n    this.setState({ [field]: !this.state[field] });\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (isMobile())\r\n      this.setState({\r\n        mainSidenavOpen: false,\r\n        secSidenavOpen: false,\r\n        isMobile: true\r\n      });\r\n    if (window)\r\n      this.windowResizeListener = window.addEventListener(\"resize\", e => {\r\n        if (isMobile())\r\n          this.setState({\r\n            mainSidenavOpen: false,\r\n            secSidenavOpen: false,\r\n            isMobile: true\r\n          });\r\n        else\r\n          this.setState({\r\n            mainSidenavOpen: true,\r\n            secSidenavOpen: true,\r\n            isMobile: false\r\n          });\r\n      });\r\n\r\n    getAllMessage().then(data => {\r\n      this.setState({\r\n        messageList: data.data\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\r\n  }\r\n\r\n  render() {\r\n    let { mainSidenavOpen, secSidenavOpen, messageList, isMobile } = this.state;\r\n    return (\r\n      <div className=\"inbox-main-sidebar-container sidebar-container\">\r\n        <InboxContent\r\n          secSidenavOpen={secSidenavOpen}\r\n          mainSidenavOpen={mainSidenavOpen}\r\n          isMobile={isMobile}\r\n          messageList={messageList}\r\n          toggleSidenav={this.toggleSidenav}\r\n        ></InboxContent>\r\n        <InboxSidenav\r\n          open={mainSidenavOpen}\r\n          toggleSidenav={this.toggleSidenav}\r\n        ></InboxSidenav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppInbox;\r\n","import axios from \"axios\";\r\n\r\nexport const getAllMessage = () => {\r\n  return axios.get(\"/api/inbox/all\");\r\n};\r\nexport const getMessageById = id => {\r\n  return axios.get(\"/api/inbox\", { data: id });\r\n};\r\nexport const deleteMessage = message => {\r\n  return axios.post(\"/api/inbox/delete\", message);\r\n};\r\nexport const addNewMessage = message => {\r\n  return axios.post(\"/api/inbox/add\", message);\r\n};\r\nexport const updateMessage = message => {\r\n  return axios.post(\"/api/inbox/update\", message);\r\n};\r\n"],"sourceRoot":""}