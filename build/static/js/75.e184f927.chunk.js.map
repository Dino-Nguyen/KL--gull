{"version":3,"sources":["../node_modules/react-bootstrap/esm/Badge.js","app/views/ui-kits/badges/AppBadge.jsx","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/Row.js"],"names":["Badge","React","ref","bsPrefix","bg","pill","text","className","as","Component","props","prefix","useBootstrapPrefix","_jsx","classNames","displayName","defaultProps","AppBadge","variantList","state","routeSegments","name","path","Row","Col","lg","md","sm","xs","SimpleCard","title","this","map","color","key","variant","ind","to","i","String","fromCharCode","DEVICE_SIZES","spans","classes","forEach","brkPoint","span","offset","order","propValue","infix","push","useCol","colProps","length","decoratedBsPrefix","sizePrefix","cols"],"mappings":"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","file":"static/js/75.e184f927.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  bg: 'primary',\n  pill: false\n};\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg,\n  pill,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React, { Component } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport OutlinedBadge from \"@gull/components/badges/OutlinedBadge\";\r\nimport SimpleCard from \"@gull/components/cards/SimpleCard\";\r\nimport { Badge, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass AppBadge extends Component {\r\n  variantList = [\r\n    \"primary\",\r\n    \"secondary\",\r\n    \"success\",\r\n    \"danger\",\r\n    \"warning\",\r\n    \"info\",\r\n    \"light\",\r\n    \"dark\",\r\n  ];\r\n\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Breadcrumb\r\n          routeSegments={[\r\n            { name: \"UI Kits\", path: \"/uikits\" },\r\n            { name: \"Badges\" },\r\n          ]}\r\n        ></Breadcrumb>\r\n        <div className=\"mb-3\">\r\n          <Row>\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard title=\"Badge outline\">\r\n                {this.variantList.map((color) => (\r\n                  <Badge\r\n                    key={color}\r\n                    className={`bg-white text-${color} rounded-pill p-2 m-1`}\r\n                    variant={`outline-${color}`}\r\n                  >\r\n                    {color}\r\n                  </Badge>\r\n                ))}\r\n              </SimpleCard>\r\n            </Col>\r\n\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard title=\"Regular Badges\">\r\n                {this.variantList.map((color) => (\r\n                  <Badge\r\n                    key={color}\r\n                    className={`bg-${color} text-white p-1 m-1`}\r\n                  >\r\n                    {color}\r\n                  </Badge>\r\n                ))}\r\n              </SimpleCard>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <Row>\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard title=\"Badge Pill\">\r\n                {this.variantList.map((color) => (\r\n                  <Badge\r\n                    key={color}\r\n                    className={`bg-${color} rounded-pill text-white p-1 m-1`}\r\n                  >\r\n                    {color}\r\n                  </Badge>\r\n                ))}\r\n              </SimpleCard>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard title=\"Badge Pill with Padding\">\r\n                {this.variantList.map((color) => (\r\n                  <Badge\r\n                    key={color}\r\n                    className={`bg-${color} rounded-pill text-white p-2 m-1`}\r\n                  >\r\n                    {color}\r\n                  </Badge>\r\n                ))}\r\n              </SimpleCard>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <Row>\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard title=\"Badge link\">\r\n                {this.variantList.map((color, ind) => (\r\n                  <Link to=\"/uikits/badges\" key={ind}>\r\n                    <Badge\r\n                      className={`bg-${color} rounded-pill text-white p-1 m-1`}\r\n                    >\r\n                      {color}\r\n                    </Badge>\r\n                  </Link>\r\n                ))}\r\n              </SimpleCard>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <Row>\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard className=\"mb-3\" title=\"Badge liSizing & Styles\">\r\n                <ul className=\"list-group list-group-flush\">\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Medium Size\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-square-${color} bg-${color} rounded-circle text-white p-2 m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-square-${color} bg-${color} text-white p-2 m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Large Size\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-square-${color} lg bg-${color} rounded-circle text-white p-2 m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-square-${color} lg bg-${color} text-white p-2 m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Extra Large Size\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-square-${color} xl bg-${color} rounded-circle text-white p-2 m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-square-${color} xl bg-${color} text-white p-2 m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n                </ul>\r\n              </SimpleCard>\r\n\r\n              <SimpleCard title=\"More Styles & Options\">\r\n                <ul className=\"list-group list-group-flash\">\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Wide badges for longer text:\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`bg-${color} rounded-0 text-white p-1 m-1`}\r\n                      >\r\n                        {color}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Rounded badges examples:\r\n                  </h6>\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`bg-${color} text-white p-1 m-1`}\r\n                      >\r\n                        {color}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n                </ul>\r\n              </SimpleCard>\r\n            </Col>\r\n\r\n            <Col lg={6} md={6} sm={6} xs={12}>\r\n              <SimpleCard title=\"Unified Styles\" className=\"mb-3\">\r\n                <ul className=\"list-group list-group-flash\">\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Circle and Square Unified Styles\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`badge-round badge-round-opacity-${color} m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n                </ul>\r\n              </SimpleCard>\r\n\r\n              <SimpleCard title=\"Basic Examples\" className=\"mb-3\">\r\n                <ul className=\"list-group list-group-flash\">\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Circle and Square Unified Styles\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        variant={color}\r\n                        className={`badge-round-${color} bg-${color} text-white sm  m-1`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n                </ul>\r\n\r\n                <ul className=\"list-group list-group-flash\">\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Dot Styles Examples:\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <span\r\n                        key={i}\r\n                        variant={color}\r\n                        className={`badge-dot-${color} me-1`}\r\n                      ></span>\r\n                    ))}\r\n                  </li>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    Pending <span className=\"badge-dot-primary me-1\"></span>\r\n                    Caption\r\n                    <span className=\"badge-dot-secondary mr-1\"></span> Heading\r\n                    <span className=\"badge-dot-success mr-1\"></span> Status\r\n                    <span className=\"badge-dot-danger mr-1\"></span>\r\n                  </li>\r\n                </ul>\r\n              </SimpleCard>\r\n\r\n              <SimpleCard title=\"Outline Badges\">\r\n                <ul className=\"list-group list-group-flash\">\r\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\r\n                    Basic state color badges:\r\n                  </h6>\r\n\r\n                  <li className=\"list-group-item border-0\">\r\n                    {this.variantList.map((color, i) => (\r\n                      <Badge\r\n                        key={i}\r\n                        className={`outline-round-${color} bg-white text-${color} sm m-1`}\r\n                        variant={`outline-${color}`}\r\n                      >\r\n                        {String.fromCharCode(65 + i)}\r\n                      </Badge>\r\n                    ))}\r\n                  </li>\r\n                </ul>\r\n              </SimpleCard>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppBadge;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const spans = [];\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span = true,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{ ...props,\n    className: classNames(className, ...classes, ...spans)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, { ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"sourceRoot":""}